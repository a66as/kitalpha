EdgeMappingImport em = (EdgeMappingImport) dEdgeImportMapping;

for (EdgeDescription iEgdeDescription : parameter.getE_description()) {

	Condition condition = iEgdeDescription.getCondition();
	ConditionalEdgeStyleDescription ceStyleDesc = null;

	if (condition != null) {
		ForeignExpressionElement fEE = condition.getExpression();
		String acceleoExpression = "";
		if (fEE instanceof JavaElement) 
		{
			String javaMethodName = ((JavaElement) fEE).getMethod();
			String mParameters = VSMVariable.view.getInnerVariable() + "," + VSMVariable.container.getInnerVariable();
			javaMethodName = JavaElementHelper.addDefaultParameterToJavaMethod(javaMethodName, mParameters);
			acceleoExpression = SiriusExpressionHelper.getExpressoin(javaMethodName, ExpressionInterpreter.Service);				
		}
		if (fEE instanceof DomainElement) 
		{
			acceleoExpression = SiriusExpressionHelper.getExpressoin(((DomainElement) fEE).getAttribute().getName(), ExpressionInterpreter.Feature);
		}

		ceStyleDesc = DescriptionFactory.eINSTANCE.createConditionalEdgeStyleDescription();
		ceStyleDesc.setPredicateExpression(acceleoExpression);
		em.getConditionnalStyles().add(ceStyleDesc);
	}
	else
	{
		ceStyleDesc = DescriptionFactory.eINSTANCE.createConditionalEdgeStyleDescription();
		ceStyleDesc.setPredicateExpression(SiriusExpressionHelper.getExpressoin("true"));
		em.getConditionnalStyles().add(ceStyleDesc);
	}

    // Initialize style and labels
	EdgeStyle vpStyle = iEgdeDescription.getStyle();
	EdgeStyleDescription eStyleDesc = null;
	
	CenterLabelStyleDescription cLabelStyleDesc = null;
	Label c_label = iEgdeDescription.getCenter_label();
	String c_labelExpression = SiriusExpressionHelper.getExpressoin("name", ExpressionInterpreter.Feature);
	
	BeginLabelStyleDescription bLabelStyleDesc = null;
	Label b_label = iEgdeDescription.getBegin_Label();
	String b_labelExpression = SiriusExpressionHelper.getExpressoin("name", ExpressionInterpreter.Feature);
	
	EndLabelStyleDescription eLabelStyleDesc = null;
	Label e_label = iEgdeDescription.getEnd_label();
	String e_labelExpression = SiriusExpressionHelper.getExpressoin("name", ExpressionInterpreter.Feature);	

	if (vpStyle != null ) 
	{
		eStyleDesc = StyleFactory.eINSTANCE.createEdgeStyleDescription();
		eStyleDesc.setLineStyle(vpStyle.getLineStyle());
		eStyleDesc.setSourceArrow(vpStyle.getBeginDecorator());
		eStyleDesc.setTargetArrow(vpStyle.getEndDecorator());
		eStyleDesc.setStrokeColor(GenerationUtil.getSystemColor(vpStyle.getColor()));
		eStyleDesc.setSizeComputationExpression("1");
	}
	else
	{
		if (b_label != null || c_label != null || e_label != null ) 
			eStyleDesc = EcoreUtil.copy(parameter.getImports().getStyle());
	}

	/********************** Setting Center Label properties ************************/


	String mParameters = VSMVariable.diagram.getInnerVariable() + "," + VSMVariable.view.getInnerVariable();

	if (c_label != null) 
	{
		((ExpressionImpl) c_label.getValue()).adaptValue(mParameters, true);
		if (c_label.getValue() != null)
			c_labelExpression = c_label.getValue().getValue();

		cLabelStyleDesc = StyleFactory.eINSTANCE.createCenterLabelStyleDescription();
		cLabelStyleDesc.setLabelExpression(c_labelExpression);
		cLabelStyleDesc.setLabelSize(c_label.getSize());
		cLabelStyleDesc.setShowIcon(false);
		cLabelStyleDesc.setLabelColor(GenerationUtil.getSystemColor(c_label.getColor()));	

		if (c_label.isBold())
			cLabelStyleDesc.getLabelFormat().add(FontFormat.BOLD_LITERAL);

		if (c_label.isItalic())
			cLabelStyleDesc.getLabelFormat().add(FontFormat.ITALIC_LITERAL);
		
	}
	else
	{
		cLabelStyleDesc = EcoreUtil.copy(parameter.getImports().getStyle().getCenterLabelStyleDescription());
	}

	/********************** Setting Begin Label properties ************************/
	if (b_label != null) 
	{
		((ExpressionImpl) b_label.getValue()).adaptValue(mParameters, true);

		if (b_label.getValue() != null)
			b_labelExpression = b_label.getValue().getValue();

		bLabelStyleDesc = StyleFactory.eINSTANCE.createBeginLabelStyleDescription();
		bLabelStyleDesc.setLabelExpression(b_labelExpression);
		bLabelStyleDesc.setLabelSize(b_label.getSize());
		bLabelStyleDesc.setShowIcon(false);
		bLabelStyleDesc.setLabelColor(GenerationUtil.getSystemColor(b_label.getColor()));	

		if (b_label.isBold())
			bLabelStyleDesc.getLabelFormat().add(FontFormat.BOLD_LITERAL);

		if (b_label.isItalic())
			bLabelStyleDesc.getLabelFormat().add(FontFormat.ITALIC_LITERAL);
	}
	else
	{
		bLabelStyleDesc = EcoreUtil.copy(parameter.getImports().getStyle().getBeginLabelStyleDescription());
	}

	/********************** Setting End Label properties ************************/
	if (e_label != null) 
	{
		((ExpressionImpl) e_label.getValue()).adaptValue(mParameters, true);
		if (e_label.getValue() != null)
			e_labelExpression = e_label.getValue().getValue();

		eLabelStyleDesc = StyleFactory.eINSTANCE.createEndLabelStyleDescription();
		eLabelStyleDesc.setLabelExpression(e_labelExpression);
		eLabelStyleDesc.setLabelSize(e_label.getSize());
		eLabelStyleDesc.setShowIcon(false);
		eLabelStyleDesc.setLabelColor(GenerationUtil.getSystemColor(e_label.getColor()));	

		if (e_label.isBold())
			eLabelStyleDesc.getLabelFormat().add(FontFormat.BOLD_LITERAL);

		if (e_label.isItalic())
			eLabelStyleDesc.getLabelFormat().add(FontFormat.ITALIC_LITERAL);
	}
	else
	{
		eLabelStyleDesc = EcoreUtil.copy(parameter.getImports().getStyle().getEndLabelStyleDescription());
	}
	/****************************************************************************************************/

	

	EdgeStyleDescription eStyleDesc_merged = null;
	try {
		eStyleDesc_merged = EdgeStyleImportMerger.mergeStyles(parameter.getImports().getStyle(), eStyleDesc, iEgdeDescription);
	} 
	catch (Exception e) {
	} 
	
	if (eStyleDesc_merged != null)
		eStyleDesc = eStyleDesc_merged;
		
	/****************************************************************************************************/
	eStyleDesc.setCenterLabelStyleDescription(cLabelStyleDesc);
	eStyleDesc.setBeginLabelStyleDescription(bLabelStyleDesc);
	eStyleDesc.setEndLabelStyleDescription(eLabelStyleDesc);
	ceStyleDesc.setStyle(eStyleDesc);
}