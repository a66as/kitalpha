 
NodeMapping nm = (NodeMapping) dNodeMapping;

for (NodeDescription iNodeDescription : parameter.getStyle()) {
	Condition condition = iNodeDescription.getCondition();
	boolean conditionalStyle = false;
	ConditionalNodeStyleDescription cnStyleDesc = null;
			
	if (condition != null) {
		conditionalStyle = true;
		ForeignExpressionElement fEE = condition.getExpression();
		String acceleoExpression = "";
		if (fEE instanceof JavaElement)
		{
			String javaMethodName = ((JavaElement) fEE).getMethod();
			String mParameters = VSMVariable.view.getInnerVariable() + "," + VSMVariable.container.getInnerVariable();
			javaMethodName = JavaElementHelper.addDefaultParameterToJavaMethod(javaMethodName, mParameters);
			acceleoExpression = SiriusExpressionHelper.getExpressoin(javaMethodName, ExpressionInterpreter.Service);		
			//acceleoExpression = SiriusExpressionHelper.getExpressoin(((JavaElement) fEE).getMethod());
		}
		if (fEE instanceof DomainElement) 
		{
			acceleoExpression = SiriusExpressionHelper.getExpressoin(((DomainElement) fEE).getAttribute().getName() );
		}

		cnStyleDesc = DescriptionFactory.eINSTANCE.createConditionalNodeStyleDescription();
		cnStyleDesc.setPredicateExpression(acceleoExpression);

		nm.getConditionnalStyles().add(cnStyleDesc);
	}

	AbstractNodeStyle vpStyle = iNodeDescription.getStyle();
			
	NodeStyleDescription nStyleDesc = null;
			
	if (vpStyle != null) {
		
		/************************* Case of Basic Style ***************************/
		if (vpStyle instanceof BasicStyle) {
			BasicStyle basicStyle = (BasicStyle) vpStyle;
			SystemColor backGroundColor = GenerationUtil.getSystemColor(basicStyle.getBackgroundColor());
			//basicStyle.getBorderColor(basicStyle.getBorderColor());
			switch (basicStyle.getForm()) {
			case SQUARE:
				nStyleDesc = StyleFactory.eINSTANCE.createSquareDescription();
				((SquareDescription)nStyleDesc).setColor(backGroundColor);
			break;
					
			case DOT:
				nStyleDesc = StyleFactory.eINSTANCE.createDotDescription();
				((DotDescription)nStyleDesc).setBackgroundColor(backGroundColor);
			break;

			case ECLIPSE:
				nStyleDesc = StyleFactory.eINSTANCE.createEllipseNodeDescription();
				((EllipseNodeDescription)nStyleDesc).setColor(backGroundColor);
			break;

			case LOZENGE:
				nStyleDesc = StyleFactory.eINSTANCE.createLozengeNodeDescription();
				((LozengeNodeDescription)nStyleDesc).setColor(backGroundColor);
			break;

			case NOTE:
				nStyleDesc = StyleFactory.eINSTANCE.createNoteDescription();
				((NoteDescription)nStyleDesc).setColor(backGroundColor);
			break;

			case RING:
				nStyleDesc = StyleFactory.eINSTANCE.createBundledImageDescription();
				BundledImageDescription bImageRing = (BundledImageDescription) nStyleDesc;
				bImageRing.setShape(BundledImageShape.RING_LITERAL);
				((BundledImageDescription)nStyleDesc).setColor(backGroundColor);
			break;

			case STROKE:
				nStyleDesc = StyleFactory.eINSTANCE.createBundledImageDescription();
				BundledImageDescription bImageStroke = (BundledImageDescription) nStyleDesc;
				bImageStroke.setShape(BundledImageShape.STROKE_LITERAL);
				((BundledImageDescription)nStyleDesc).setColor(backGroundColor);
			break;

			case TRIANGLE:
				nStyleDesc = StyleFactory.eINSTANCE.createBundledImageDescription();
				BundledImageDescription bImageTriangle = (BundledImageDescription) nStyleDesc;
				bImageTriangle.setShape(BundledImageShape.TRIANGLE_LITERAL);
				((BundledImageDescription)nStyleDesc).setColor(backGroundColor);
			break;
			}
			nStyleDesc.setBorderColor(GenerationUtil.getSystemColor(basicStyle.getBorderColor()));
		}

		/******************** Case of Workspace Image Style **********************/
		if (vpStyle instanceof ImageStyle) {
			ImageStyle vpImageStyle = (ImageStyle) vpStyle;
			
			// Creation of Doremi WorkspaceImageStyle for Container Mapping
			nStyleDesc =  StyleFactory.eINSTANCE.createWorkspaceImageDescription();
			WorkspaceImageDescription doremiImageStyle =  (WorkspaceImageDescription)nStyleDesc;
						
			if (vpImageStyle.getImagePath() != null && vpImageStyle.getImagePath().trim().length() > 0) 
			{
				String icon_path = IconPathHelper.computeDslIconPath(vpImageStyle.getImagePath(), parameter);
				if (icon_path != null && icon_path.trim().length() > 0) 
				{
					doremiImageStyle.setWorkspacePath(icon_path);
					IconPathHelper.copyIconFile(vpImageStyle.getImagePath(), parameter);
				}
			}
			//doremiImageStyle.setWorkspacePath(vpImageStyle.getImagePath());
							
			doremiImageStyle.setBorderColor(GenerationUtil.getSystemColor(vpImageStyle.getBorderColor()));
		}
		
		/************************ Case of Histogram Style ***********************/
		if (vpStyle instanceof HistogramStyle) 
		{
			HistogramStyle vpHistogramStyle = (HistogramStyle) vpStyle;
			// Creation of Doremi WorkspaceImageStyle for Container Mapping
			nStyleDesc = StyleFactory.eINSTANCE.createGaugeCompositeStyleDescription();
			GaugeCompositeStyleDescription doremiGaugeStyle = (GaugeCompositeStyleDescription) nStyleDesc;
			doremiGaugeStyle.setBorderColor(GenerationUtil.getSystemColor(vpHistogramStyle.getBorderColor()));
			for (HistogramSection iHistogramSection : vpHistogramStyle.getSections()) 
			{
				GaugeSectionDescription one_section = StyleFactory.eINSTANCE.createGaugeSectionDescription();
				one_section.setBackgroundColor(GenerationUtil.getSystemColor(iHistogramSection.getBackgroundColor()));
				one_section.setForegroundColor(GenerationUtil.getSystemColor(iHistogramSection.getForgroundColor()));
				one_section.setMaxValueExpression(SiriusExpressionHelper.getExpressoin(iHistogramSection.getMaxValue().toString()));
				one_section.setMinValueExpression(SiriusExpressionHelper.getExpressoin(iHistogramSection.getMinValue().toString()));
				one_section.setValueExpression(SiriusExpressionHelper.getExpressoin(iHistogramSection.getValue().toString()));
				doremiGaugeStyle.getSections().add(one_section);
			}
		}
		
		nStyleDesc.setResizeKind(ResizeKind.NSEW_LITERAL);
				
		/********************** Setting Label properties ************************/
		Label label = iNodeDescription.getNode_Label();
		String labelExpression = SiriusExpressionHelper.getExpressoin("name", ExpressionInterpreter.Feature);
				
		if (label != null) {
			//((ExpressionImpl) label.getValue()).adaptValue();
			String mParameters = VSMVariable.diagram.getInnerVariable() + "," + VSMVariable.view.getInnerVariable();
			((ExpressionImpl) label.getValue()).adaptValue(mParameters, true);
					
			if (label.getValue() != null)
				labelExpression = label.getValue().getValue();
				
			nStyleDesc.setLabelExpression(labelExpression);
			nStyleDesc.setLabelSize(label.getSize());
			nStyleDesc.setShowIcon(false);
			nStyleDesc.setLabelAlignment(iNodeDescription.getLabel_alignement());
			nStyleDesc.setLabelPosition(iNodeDescription.getLabel_position());
			
			nStyleDesc.setLabelColor(GenerationUtil.getSystemColor(label.getColor()));		
					
			if (label.isBold())
				nStyleDesc.getLabelFormat().add(FontFormat.BOLD_LITERAL);
					
			if (label.isItalic())
				nStyleDesc.getLabelFormat().add(FontFormat.ITALIC_LITERAL);
		}
		
		/************************************************************************************************/
		NodeStyleDescription nStyleDesc_marged = null;
		try {
			nStyleDesc_marged = NodeStyleImportMerger.mergeStyles(parameter.getImports().getStyle(), nStyleDesc, iNodeDescription);
		} 
		catch (Exception e) {
		} 
		if (nStyleDesc_marged != null)
			nStyleDesc = nStyleDesc_marged;
		/************************************************************************************************/
		
				
		// Add the created container style to it parent
		if (conditionalStyle)
			cnStyleDesc.setStyle(nStyleDesc);
		else
			nm.setStyle(nStyleDesc);
	}
}
 